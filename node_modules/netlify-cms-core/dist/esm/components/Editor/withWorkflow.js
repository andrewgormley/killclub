function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { connect } from 'react-redux';
import { EDITORIAL_WORKFLOW } from "../../constants/publishModes";
import { selectUnpublishedEntry } from "../../reducers";
import { selectAllowDeletion } from "../../reducers/collections";
import { loadUnpublishedEntry, persistUnpublishedEntry } from "../../actions/editorialWorkflow";
import { jsx as ___EmotionJSX } from "@emotion/core";

function mapStateToProps(state, ownProps) {
  const {
    collections
  } = state;
  const isEditorialWorkflow = state.config.publish_mode === EDITORIAL_WORKFLOW;
  const collection = collections.get(ownProps.match.params.name);
  const returnObj = {
    isEditorialWorkflow,
    showDelete: !ownProps.newEntry && selectAllowDeletion(collection)
  };

  if (isEditorialWorkflow) {
    const slug = ownProps.match.params[0];
    const unpublishedEntry = selectUnpublishedEntry(state, collection.get('name'), slug);

    if (unpublishedEntry) {
      returnObj.unpublishedEntry = true;
      returnObj.entry = unpublishedEntry;
    }
  }

  return returnObj;
}

function mergeProps(stateProps, dispatchProps, ownProps) {
  const {
    isEditorialWorkflow,
    unpublishedEntry
  } = stateProps;
  const {
    dispatch
  } = dispatchProps;
  const returnObj = {};

  if (isEditorialWorkflow) {
    // Overwrite loadEntry to loadUnpublishedEntry
    returnObj.loadEntry = (collection, slug) => dispatch(loadUnpublishedEntry(collection, slug)); // Overwrite persistEntry to persistUnpublishedEntry


    returnObj.persistEntry = collection => dispatch(persistUnpublishedEntry(collection, unpublishedEntry));
  }

  return _objectSpread(_objectSpread(_objectSpread({}, ownProps), stateProps), returnObj);
}

export default function withWorkflow(Editor) {
  return connect(mapStateToProps, null, mergeProps)(class WorkflowEditor extends React.Component {
    render() {
      return ___EmotionJSX(Editor, this.props);
    }

  });
}