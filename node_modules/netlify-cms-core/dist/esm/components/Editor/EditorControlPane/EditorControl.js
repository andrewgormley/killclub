import _styled from "@emotion/styled-base";
import _uniqueId from "lodash/uniqueId";
import _partial from "lodash/partial";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

import React from 'react';
import { bindActionCreators } from "redux";
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { translate } from 'react-polyglot';
import { ClassNames, Global, css as coreCss } from '@emotion/core';
import { connect } from 'react-redux';
import { FieldLabel, colors, transitions, lengths, borders } from 'netlify-cms-ui-default';
import { resolveWidget, getEditorComponents } from "../../../lib/registry";
import { clearFieldErrors, tryLoadEntry } from "../../../actions/entries";
import { addAsset, boundGetAsset } from "../../../actions/media";
import { selectIsLoadingAsset } from "../../../reducers/medias";
import { query, clearSearch } from "../../../actions/search";
import { openMediaLibrary, removeInsertedMedia, clearMediaControl, removeMediaControl, persistMedia } from "../../../actions/mediaLibrary";
import Widget from "./Widget";
import { validateMetaField } from "../../../actions/entries";
/**
 * This is a necessary bridge as we are still passing classnames to widgets
 * for styling. Once that changes we can stop storing raw style strings like
 * this.
 */

import { jsx as ___EmotionJSX } from "@emotion/core";
const styleStrings = {
  widget: `
    display: block;
    width: 100%;
    padding: ${lengths.inputPadding};
    margin: 0;
    border: ${borders.textField};
    border-radius: ${lengths.borderRadius};
    border-top-left-radius: 0;
    outline: 0;
    box-shadow: none;
    background-color: ${colors.inputBackground};
    color: #444a57;
    transition: border-color ${transitions.main};
    position: relative;
    font-size: 15px;
    line-height: 1.5;

    select& {
      text-indent: 14px;
      height: 58px;
    }
  `,
  widgetActive: `
    border-color: ${colors.active};
  `,
  widgetError: `
    border-color: ${colors.errorText};
  `,
  disabled: `
    pointer-events: none;
    opacity: 0.5;
    background: #ccc;
  `,
  hidden: `
    visibility: hidden;
  `
};

const ControlContainer = _styled("div", {
  target: "ei073ck0",
  label: "ControlContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}"
} : {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const ControlErrorsList = _styled("ul", {
  target: "ei073ck1",
  label: "ControlErrorsList"
})("list-style-type:none;font-size:12px;color:", colors.errorText, ";margin-bottom:5px;text-align:right;text-transform:uppercase;position:relative;font-weight:600;top:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZFbUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvckNvbnRyb2xQYW5lL0VkaXRvckNvbnRyb2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBDbGFzc05hbWVzLCBHbG9iYWwsIGNzcyBhcyBjb3JlQ3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBwYXJ0aWFsLCB1bmlxdWVJZCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgRmllbGRMYWJlbCwgY29sb3JzLCB0cmFuc2l0aW9ucywgbGVuZ3RocywgYm9yZGVycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgcmVzb2x2ZVdpZGdldCwgZ2V0RWRpdG9yQ29tcG9uZW50cyB9IGZyb20gJ0xpYi9yZWdpc3RyeSc7XG5pbXBvcnQgeyBjbGVhckZpZWxkRXJyb3JzLCB0cnlMb2FkRW50cnkgfSBmcm9tICdBY3Rpb25zL2VudHJpZXMnO1xuaW1wb3J0IHsgYWRkQXNzZXQsIGJvdW5kR2V0QXNzZXQgfSBmcm9tICdBY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IHNlbGVjdElzTG9hZGluZ0Fzc2V0IH0gZnJvbSAnUmVkdWNlcnMvbWVkaWFzJztcbmltcG9ydCB7IHF1ZXJ5LCBjbGVhclNlYXJjaCB9IGZyb20gJ0FjdGlvbnMvc2VhcmNoJztcbmltcG9ydCB7XG4gIG9wZW5NZWRpYUxpYnJhcnksXG4gIHJlbW92ZUluc2VydGVkTWVkaWEsXG4gIGNsZWFyTWVkaWFDb250cm9sLFxuICByZW1vdmVNZWRpYUNvbnRyb2wsXG4gIHBlcnNpc3RNZWRpYSxcbn0gZnJvbSAnQWN0aW9ucy9tZWRpYUxpYnJhcnknO1xuaW1wb3J0IFdpZGdldCBmcm9tICcuL1dpZGdldCc7XG5pbXBvcnQgeyB2YWxpZGF0ZU1ldGFGaWVsZCB9IGZyb20gJy4uLy4uLy4uL2FjdGlvbnMvZW50cmllcyc7XG5cbi8qKlxuICogVGhpcyBpcyBhIG5lY2Vzc2FyeSBicmlkZ2UgYXMgd2UgYXJlIHN0aWxsIHBhc3NpbmcgY2xhc3NuYW1lcyB0byB3aWRnZXRzXG4gKiBmb3Igc3R5bGluZy4gT25jZSB0aGF0IGNoYW5nZXMgd2UgY2FuIHN0b3Agc3RvcmluZyByYXcgc3R5bGUgc3RyaW5ncyBsaWtlXG4gKiB0aGlzLlxuICovXG5jb25zdCBzdHlsZVN0cmluZ3MgPSB7XG4gIHdpZGdldDogYFxuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6ICR7bGVuZ3Rocy5pbnB1dFBhZGRpbmd9O1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXI6ICR7Ym9yZGVycy50ZXh0RmllbGR9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XG4gICAgb3V0bGluZTogMDtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmlucHV0QmFja2dyb3VuZH07XG4gICAgY29sb3I6ICM0NDRhNTc7XG4gICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn07XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICBsaW5lLWhlaWdodDogMS41O1xuXG4gICAgc2VsZWN0JiB7XG4gICAgICB0ZXh0LWluZGVudDogMTRweDtcbiAgICAgIGhlaWdodDogNThweDtcbiAgICB9XG4gIGAsXG4gIHdpZGdldEFjdGl2ZTogYFxuICAgIGJvcmRlci1jb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgYCxcbiAgd2lkZ2V0RXJyb3I6IGBcbiAgICBib3JkZXItY29sb3I6ICR7Y29sb3JzLmVycm9yVGV4dH07XG4gIGAsXG4gIGRpc2FibGVkOiBgXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgb3BhY2l0eTogMC41O1xuICAgIGJhY2tncm91bmQ6ICNjY2M7XG4gIGAsXG4gIGhpZGRlbjogYFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgYCxcbn07XG5cbmNvbnN0IENvbnRyb2xDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAxNnB4O1xuXG4gICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXRvcDogMzZweDtcbiAgfVxuYDtcblxuY29uc3QgQ29udHJvbEVycm9yc0xpc3QgPSBzdHlsZWQudWxgXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMuZXJyb3JUZXh0fTtcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmb250LXdlaWdodDogNjAwO1xuICB0b3A6IDIwcHg7XG5gO1xuXG5leHBvcnQgY29uc3QgQ29udHJvbEhpbnQgPSBzdHlsZWQucGBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbiAgcGFkZGluZzogM3B4IDA7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6ICR7cHJvcHMgPT5cbiAgICBwcm9wcy5lcnJvciA/IGNvbG9ycy5lcnJvclRleHQgOiBwcm9wcy5hY3RpdmUgPyBjb2xvcnMuYWN0aXZlIDogY29sb3JzLmNvbnRyb2xMYWJlbH07XG4gIHRyYW5zaXRpb246IGNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn07XG5gO1xuXG5mdW5jdGlvbiBMYWJlbENvbXBvbmVudCh7IGZpZWxkLCBpc0FjdGl2ZSwgaGFzRXJyb3JzLCB1bmlxdWVGaWVsZElkLCBpc0ZpZWxkT3B0aW9uYWwsIHQgfSkge1xuICBjb25zdCBsYWJlbCA9IGAke2ZpZWxkLmdldCgnbGFiZWwnLCBmaWVsZC5nZXQoJ25hbWUnKSl9YDtcbiAgY29uc3QgbGFiZWxDb21wb25lbnQgPSAoXG4gICAgPEZpZWxkTGFiZWwgaXNBY3RpdmU9e2lzQWN0aXZlfSBoYXNFcnJvcnM9e2hhc0Vycm9yc30gaHRtbEZvcj17dW5pcXVlRmllbGRJZH0+XG4gICAgICB7bGFiZWx9IHtgJHtpc0ZpZWxkT3B0aW9uYWwgPyBgICgke3QoJ2VkaXRvci5lZGl0b3JDb250cm9sLmZpZWxkLm9wdGlvbmFsJyl9KWAgOiAnJ31gfVxuICAgIDwvRmllbGRMYWJlbD5cbiAgKTtcblxuICByZXR1cm4gbGFiZWxDb21wb25lbnQ7XG59XG5cbmNsYXNzIEVkaXRvckNvbnRyb2wgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICBdKSxcbiAgICBmaWVsZDogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGZpZWxkc01ldGFEYXRhOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGZpZWxkc0Vycm9yczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBtZWRpYVBhdGhzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgYm91bmRHZXRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGFkZEFzc2V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZUluc2VydGVkTWVkaWE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcGVyc2lzdE1lZGlhOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uVmFsaWRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIHByb2Nlc3NDb250cm9sUmVmOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBjb250cm9sUmVmOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBxdWVyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBxdWVyeUhpdHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xlYXJTZWFyY2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2xlYXJGaWVsZEVycm9yczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBsb2FkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBpc0VkaXRvckNvbXBvbmVudDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNOZXdFZGl0b3JDb21wb25lbnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHBhcmVudElkczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gICAgZW50cnk6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgaXNEaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNIaWRkZW46IFByb3BUeXBlcy5ib29sLFxuICAgIGlzRmllbGREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGlzRmllbGRIaWRkZW46IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgcGFyZW50SWRzOiBbXSxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBhY3RpdmVMYWJlbDogZmFsc2UsXG4gIH07XG5cbiAgdW5pcXVlRmllbGRJZCA9IHVuaXF1ZUlkKGAke3RoaXMucHJvcHMuZmllbGQuZ2V0KCduYW1lJyl9LWZpZWxkLWApO1xuXG4gIGlzQW5jZXN0b3JPZkZpZWxkRXJyb3IgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBmaWVsZHNFcnJvcnMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoZmllbGRzRXJyb3JzICYmIGZpZWxkc0Vycm9ycy5zaXplID4gMCkge1xuICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZmllbGRzRXJyb3JzLnRvSlMoKSkuc29tZShhcnIgPT5cbiAgICAgICAgYXJyLnNvbWUoZXJyID0+IGVyci5wYXJlbnRJZHMgJiYgZXJyLnBhcmVudElkcy5pbmNsdWRlcyh0aGlzLnVuaXF1ZUZpZWxkSWQpKSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdmFsdWUsXG4gICAgICBlbnRyeSxcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBjb25maWcsXG4gICAgICBmaWVsZCxcbiAgICAgIGZpZWxkc01ldGFEYXRhLFxuICAgICAgZmllbGRzRXJyb3JzLFxuICAgICAgbWVkaWFQYXRocyxcbiAgICAgIGJvdW5kR2V0QXNzZXQsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBjbGVhck1lZGlhQ29udHJvbCxcbiAgICAgIHJlbW92ZU1lZGlhQ29udHJvbCxcbiAgICAgIGFkZEFzc2V0LFxuICAgICAgcmVtb3ZlSW5zZXJ0ZWRNZWRpYSxcbiAgICAgIHBlcnNpc3RNZWRpYSxcbiAgICAgIG9uVmFsaWRhdGUsXG4gICAgICBwcm9jZXNzQ29udHJvbFJlZixcbiAgICAgIGNvbnRyb2xSZWYsXG4gICAgICBxdWVyeSxcbiAgICAgIHF1ZXJ5SGl0cyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICBjbGVhclNlYXJjaCxcbiAgICAgIGNsZWFyRmllbGRFcnJvcnMsXG4gICAgICBsb2FkRW50cnksXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBpc1NlbGVjdGVkLFxuICAgICAgaXNFZGl0b3JDb21wb25lbnQsXG4gICAgICBpc05ld0VkaXRvckNvbXBvbmVudCxcbiAgICAgIHBhcmVudElkcyxcbiAgICAgIHQsXG4gICAgICB2YWxpZGF0ZU1ldGFGaWVsZCxcbiAgICAgIGlzRGlzYWJsZWQsXG4gICAgICBpc0hpZGRlbixcbiAgICAgIGlzRmllbGREdXBsaWNhdGUsXG4gICAgICBpc0ZpZWxkSGlkZGVuLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgd2lkZ2V0TmFtZSA9IGZpZWxkLmdldCgnd2lkZ2V0Jyk7XG4gICAgY29uc3Qgd2lkZ2V0ID0gcmVzb2x2ZVdpZGdldCh3aWRnZXROYW1lKTtcbiAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZC5nZXQoJ25hbWUnKTtcbiAgICBjb25zdCBmaWVsZEhpbnQgPSBmaWVsZC5nZXQoJ2hpbnQnKTtcbiAgICBjb25zdCBpc0ZpZWxkT3B0aW9uYWwgPSBmaWVsZC5nZXQoJ3JlcXVpcmVkJykgPT09IGZhbHNlO1xuICAgIGNvbnN0IG9uVmFsaWRhdGVPYmplY3QgPSBvblZhbGlkYXRlO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gZmllbGRzTWV0YURhdGEgJiYgZmllbGRzTWV0YURhdGEuZ2V0KGZpZWxkTmFtZSk7XG4gICAgY29uc3QgZXJyb3JzID0gZmllbGRzRXJyb3JzICYmIGZpZWxkc0Vycm9ycy5nZXQodGhpcy51bmlxdWVGaWVsZElkKTtcbiAgICBjb25zdCBjaGlsZEVycm9ycyA9IHRoaXMuaXNBbmNlc3Rvck9mRmllbGRFcnJvcigpO1xuICAgIGNvbnN0IGhhc0Vycm9ycyA9ICEhZXJyb3JzIHx8IGNoaWxkRXJyb3JzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDbGFzc05hbWVzPlxuICAgICAgICB7KHsgY3NzLCBjeCB9KSA9PiAoXG4gICAgICAgICAgPENvbnRyb2xDb250YWluZXJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICR7aXNIaWRkZW4gJiYgc3R5bGVTdHJpbmdzLmhpZGRlbn07XG4gICAgICAgICAgICBgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt3aWRnZXQuZ2xvYmFsU3R5bGVzICYmIDxHbG9iYWwgc3R5bGVzPXtjb3JlQ3NzYCR7d2lkZ2V0Lmdsb2JhbFN0eWxlc31gfSAvPn1cbiAgICAgICAgICAgIHtlcnJvcnMgJiYgKFxuICAgICAgICAgICAgICA8Q29udHJvbEVycm9yc0xpc3Q+XG4gICAgICAgICAgICAgICAge2Vycm9ycy5tYXAoXG4gICAgICAgICAgICAgICAgICBlcnJvciA9PlxuICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17ZXJyb3IubWVzc2FnZS50cmltKCkucmVwbGFjZSgvW15hLXowLTldKy9naSwgJy0nKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ZXJyb3IubWVzc2FnZX1cbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvQ29udHJvbEVycm9yc0xpc3Q+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPExhYmVsQ29tcG9uZW50XG4gICAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgICAgaXNBY3RpdmU9e2lzU2VsZWN0ZWQgfHwgdGhpcy5zdGF0ZS5zdHlsZUFjdGl2ZX1cbiAgICAgICAgICAgICAgaGFzRXJyb3JzPXtoYXNFcnJvcnN9XG4gICAgICAgICAgICAgIHVuaXF1ZUZpZWxkSWQ9e3RoaXMudW5pcXVlRmllbGRJZH1cbiAgICAgICAgICAgICAgaXNGaWVsZE9wdGlvbmFsPXtpc0ZpZWxkT3B0aW9uYWx9XG4gICAgICAgICAgICAgIHQ9e3R9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFdpZGdldFxuICAgICAgICAgICAgICBjbGFzc05hbWVXcmFwcGVyPXtjeChcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy53aWRnZXR9O1xuICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgW2Nzc2BcbiAgICAgICAgICAgICAgICAgICAgJHtzdHlsZVN0cmluZ3Mud2lkZ2V0QWN0aXZlfTtcbiAgICAgICAgICAgICAgICAgIGBdOiBpc1NlbGVjdGVkIHx8IHRoaXMuc3RhdGUuc3R5bGVBY3RpdmUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBbY3NzYFxuICAgICAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy53aWRnZXRFcnJvcn07XG4gICAgICAgICAgICAgICAgICBgXTogaGFzRXJyb3JzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgW2Nzc2BcbiAgICAgICAgICAgICAgICAgICAgJHtzdHlsZVN0cmluZ3MuZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICBgXTogaXNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICBjbGFzc05hbWVXaWRnZXQ9e2Nzc2BcbiAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy53aWRnZXR9O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICBjbGFzc05hbWVXaWRnZXRBY3RpdmU9e2Nzc2BcbiAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy53aWRnZXRBY3RpdmV9O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICBjbGFzc05hbWVMYWJlbD17Y3NzYFxuICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLmxhYmVsfTtcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lTGFiZWxBY3RpdmU9e2Nzc2BcbiAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy5sYWJlbEFjdGl2ZX07XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAgIGNvbnRyb2xDb21wb25lbnQ9e3dpZGdldC5jb250cm9sfVxuICAgICAgICAgICAgICBlbnRyeT17ZW50cnl9XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICAgIGNvbmZpZz17Y29uZmlnfVxuICAgICAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgICAgICAgIHVuaXF1ZUZpZWxkSWQ9e3RoaXMudW5pcXVlRmllbGRJZH1cbiAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICBtZWRpYVBhdGhzPXttZWRpYVBhdGhzfVxuICAgICAgICAgICAgICBtZXRhZGF0YT17bWV0YWRhdGF9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsobmV3VmFsdWUsIG5ld01ldGFkYXRhKSA9PiBvbkNoYW5nZShmaWVsZCwgbmV3VmFsdWUsIG5ld01ldGFkYXRhKX1cbiAgICAgICAgICAgICAgb25WYWxpZGF0ZT17b25WYWxpZGF0ZSAmJiBwYXJ0aWFsKG9uVmFsaWRhdGUsIHRoaXMudW5pcXVlRmllbGRJZCl9XG4gICAgICAgICAgICAgIG9uT3Blbk1lZGlhTGlicmFyeT17b3Blbk1lZGlhTGlicmFyeX1cbiAgICAgICAgICAgICAgb25DbGVhck1lZGlhQ29udHJvbD17Y2xlYXJNZWRpYUNvbnRyb2x9XG4gICAgICAgICAgICAgIG9uUmVtb3ZlTWVkaWFDb250cm9sPXtyZW1vdmVNZWRpYUNvbnRyb2x9XG4gICAgICAgICAgICAgIG9uUmVtb3ZlSW5zZXJ0ZWRNZWRpYT17cmVtb3ZlSW5zZXJ0ZWRNZWRpYX1cbiAgICAgICAgICAgICAgb25QZXJzaXN0TWVkaWE9e3BlcnNpc3RNZWRpYX1cbiAgICAgICAgICAgICAgb25BZGRBc3NldD17YWRkQXNzZXR9XG4gICAgICAgICAgICAgIGdldEFzc2V0PXtib3VuZEdldEFzc2V0fVxuICAgICAgICAgICAgICBoYXNBY3RpdmVTdHlsZT17aXNTZWxlY3RlZCB8fCB0aGlzLnN0YXRlLnN0eWxlQWN0aXZlfVxuICAgICAgICAgICAgICBzZXRBY3RpdmVTdHlsZT17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHN0eWxlQWN0aXZlOiB0cnVlIH0pfVxuICAgICAgICAgICAgICBzZXRJbmFjdGl2ZVN0eWxlPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc3R5bGVBY3RpdmU6IGZhbHNlIH0pfVxuICAgICAgICAgICAgICByZXNvbHZlV2lkZ2V0PXtyZXNvbHZlV2lkZ2V0fVxuICAgICAgICAgICAgICB3aWRnZXQ9e3dpZGdldH1cbiAgICAgICAgICAgICAgZ2V0RWRpdG9yQ29tcG9uZW50cz17Z2V0RWRpdG9yQ29tcG9uZW50c31cbiAgICAgICAgICAgICAgcmVmPXtwcm9jZXNzQ29udHJvbFJlZiAmJiBwYXJ0aWFsKHByb2Nlc3NDb250cm9sUmVmLCBmaWVsZCl9XG4gICAgICAgICAgICAgIGNvbnRyb2xSZWY9e2NvbnRyb2xSZWZ9XG4gICAgICAgICAgICAgIGVkaXRvckNvbnRyb2w9e0Nvbm5lY3RlZEVkaXRvckNvbnRyb2x9XG4gICAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgICAgbG9hZEVudHJ5PXtsb2FkRW50cnl9XG4gICAgICAgICAgICAgIHF1ZXJ5SGl0cz17cXVlcnlIaXRzW3RoaXMudW5pcXVlRmllbGRJZF0gfHwgW119XG4gICAgICAgICAgICAgIGNsZWFyU2VhcmNoPXtjbGVhclNlYXJjaH1cbiAgICAgICAgICAgICAgY2xlYXJGaWVsZEVycm9ycz17Y2xlYXJGaWVsZEVycm9yc31cbiAgICAgICAgICAgICAgaXNGZXRjaGluZz17aXNGZXRjaGluZ31cbiAgICAgICAgICAgICAgZmllbGRzRXJyb3JzPXtmaWVsZHNFcnJvcnN9XG4gICAgICAgICAgICAgIG9uVmFsaWRhdGVPYmplY3Q9e29uVmFsaWRhdGVPYmplY3R9XG4gICAgICAgICAgICAgIGlzRWRpdG9yQ29tcG9uZW50PXtpc0VkaXRvckNvbXBvbmVudH1cbiAgICAgICAgICAgICAgaXNOZXdFZGl0b3JDb21wb25lbnQ9e2lzTmV3RWRpdG9yQ29tcG9uZW50fVxuICAgICAgICAgICAgICBwYXJlbnRJZHM9e3BhcmVudElkc31cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgICAgdmFsaWRhdGVNZXRhRmllbGQ9e3ZhbGlkYXRlTWV0YUZpZWxkfVxuICAgICAgICAgICAgICBpc0Rpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgICAgICBpc0ZpZWxkRHVwbGljYXRlPXtpc0ZpZWxkRHVwbGljYXRlfVxuICAgICAgICAgICAgICBpc0ZpZWxkSGlkZGVuPXtpc0ZpZWxkSGlkZGVufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtmaWVsZEhpbnQgJiYgKFxuICAgICAgICAgICAgICA8Q29udHJvbEhpbnQgYWN0aXZlPXtpc1NlbGVjdGVkIHx8IHRoaXMuc3RhdGUuc3R5bGVBY3RpdmV9IGVycm9yPXtoYXNFcnJvcnN9PlxuICAgICAgICAgICAgICAgIHtmaWVsZEhpbnR9XG4gICAgICAgICAgICAgIDwvQ29udHJvbEhpbnQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvQ29udHJvbENvbnRhaW5lcj5cbiAgICAgICAgKX1cbiAgICAgIDwvQ2xhc3NOYW1lcz5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICBjb25zdCB7IGNvbGxlY3Rpb25zLCBlbnRyeURyYWZ0IH0gPSBzdGF0ZTtcbiAgY29uc3QgZW50cnkgPSBlbnRyeURyYWZ0LmdldCgnZW50cnknKTtcbiAgY29uc3QgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25zLmdldChlbnRyeURyYWZ0LmdldEluKFsnZW50cnknLCAnY29sbGVjdGlvbiddKSk7XG4gIGNvbnN0IGlzTG9hZGluZ0Fzc2V0ID0gc2VsZWN0SXNMb2FkaW5nQXNzZXQoc3RhdGUubWVkaWFzKTtcblxuICBhc3luYyBmdW5jdGlvbiBsb2FkRW50cnkoY29sbGVjdGlvbk5hbWUsIHNsdWcpIHtcbiAgICBjb25zdCB0YXJnZXRDb2xsZWN0aW9uID0gY29sbGVjdGlvbnMuZ2V0KGNvbGxlY3Rpb25OYW1lKTtcbiAgICBpZiAodGFyZ2V0Q29sbGVjdGlvbikge1xuICAgICAgY29uc3QgbG9hZGVkRW50cnkgPSBhd2FpdCB0cnlMb2FkRW50cnkoc3RhdGUsIHRhcmdldENvbGxlY3Rpb24sIHNsdWcpO1xuICAgICAgcmV0dXJuIGxvYWRlZEVudHJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGZpbmQgY29sbGVjdGlvbiAnJHtjb2xsZWN0aW9uTmFtZX0nYCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtZWRpYVBhdGhzOiBzdGF0ZS5tZWRpYUxpYnJhcnkuZ2V0KCdjb250cm9sTWVkaWEnKSxcbiAgICBpc0ZldGNoaW5nOiBzdGF0ZS5zZWFyY2guaXNGZXRjaGluZyxcbiAgICBxdWVyeUhpdHM6IHN0YXRlLnNlYXJjaC5xdWVyeUhpdHMsXG4gICAgY29uZmlnOiBzdGF0ZS5jb25maWcsXG4gICAgZW50cnksXG4gICAgY29sbGVjdGlvbixcbiAgICBpc0xvYWRpbmdBc3NldCxcbiAgICBsb2FkRW50cnksXG4gICAgdmFsaWRhdGVNZXRhRmllbGQ6IChmaWVsZCwgdmFsdWUsIHQpID0+IHZhbGlkYXRlTWV0YUZpZWxkKHN0YXRlLCBjb2xsZWN0aW9uLCBmaWVsZCwgdmFsdWUsIHQpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpIHtcbiAgY29uc3QgY3JlYXRvcnMgPSBiaW5kQWN0aW9uQ3JlYXRvcnMoXG4gICAge1xuICAgICAgb3Blbk1lZGlhTGlicmFyeSxcbiAgICAgIGNsZWFyTWVkaWFDb250cm9sLFxuICAgICAgcmVtb3ZlTWVkaWFDb250cm9sLFxuICAgICAgcmVtb3ZlSW5zZXJ0ZWRNZWRpYSxcbiAgICAgIHBlcnNpc3RNZWRpYSxcbiAgICAgIGFkZEFzc2V0LFxuICAgICAgcXVlcnksXG4gICAgICBjbGVhclNlYXJjaCxcbiAgICAgIGNsZWFyRmllbGRFcnJvcnMsXG4gICAgfSxcbiAgICBkaXNwYXRjaCxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5jcmVhdG9ycyxcbiAgICBib3VuZEdldEFzc2V0OiAoY29sbGVjdGlvbiwgZW50cnkpID0+IGJvdW5kR2V0QXNzZXQoZGlzcGF0Y2gsIGNvbGxlY3Rpb24sIGVudHJ5KSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQoc3RhdGVQcm9wcy5jb2xsZWN0aW9uLCBzdGF0ZVByb3BzLmVudHJ5KSxcbiAgfTtcbn1cblxuY29uc3QgQ29ubmVjdGVkRWRpdG9yQ29udHJvbCA9IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxuICBtZXJnZVByb3BzLFxuKSh0cmFuc2xhdGUoKShFZGl0b3JDb250cm9sKSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbm5lY3RlZEVkaXRvckNvbnRyb2w7XG4iXX0= */"));

export const ControlHint = _styled("p", {
  target: "ei073ck2",
  label: "ControlHint"
})("margin-bottom:0;padding:3px 0;font-size:12px;color:", props => props.error ? colors.errorText : props.active ? colors.active : colors.controlLabel, ";transition:color ", transitions.main, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

function LabelComponent({
  field,
  isActive,
  hasErrors,
  uniqueFieldId,
  isFieldOptional,
  t
}) {
  const label = `${field.get('label', field.get('name'))}`;

  const labelComponent = ___EmotionJSX(FieldLabel, {
    isActive: isActive,
    hasErrors: hasErrors,
    htmlFor: uniqueFieldId
  }, label, " ", `${isFieldOptional ? ` (${t('editor.editorControl.field.optional')})` : ''}`);

  return labelComponent;
}

class EditorControl extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      activeLabel: false
    });

    _defineProperty(this, "uniqueFieldId", _uniqueId(`${this.props.field.get('name')}-field-`));

    _defineProperty(this, "isAncestorOfFieldError", () => {
      const {
        fieldsErrors
      } = this.props;

      if (fieldsErrors && fieldsErrors.size > 0) {
        return Object.values(fieldsErrors.toJS()).some(arr => arr.some(err => err.parentIds && err.parentIds.includes(this.uniqueFieldId)));
      }

      return false;
    });
  }

  render() {
    const {
      value,
      entry,
      collection,
      config,
      field,
      fieldsMetaData,
      fieldsErrors,
      mediaPaths,
      boundGetAsset,
      onChange,
      openMediaLibrary,
      clearMediaControl,
      removeMediaControl,
      addAsset,
      removeInsertedMedia,
      persistMedia,
      onValidate,
      processControlRef,
      controlRef,
      query,
      queryHits,
      isFetching,
      clearSearch,
      clearFieldErrors,
      loadEntry,
      className,
      isSelected,
      isEditorComponent,
      isNewEditorComponent,
      parentIds,
      t,
      validateMetaField,
      isDisabled,
      isHidden,
      isFieldDuplicate,
      isFieldHidden
    } = this.props;
    const widgetName = field.get('widget');
    const widget = resolveWidget(widgetName);
    const fieldName = field.get('name');
    const fieldHint = field.get('hint');
    const isFieldOptional = field.get('required') === false;
    const onValidateObject = onValidate;
    const metadata = fieldsMetaData && fieldsMetaData.get(fieldName);
    const errors = fieldsErrors && fieldsErrors.get(this.uniqueFieldId);
    const childErrors = this.isAncestorOfFieldError();
    const hasErrors = !!errors || childErrors;
    return ___EmotionJSX(ClassNames, null, ({
      css,
      cx
    }) => ___EmotionJSX(ControlContainer, {
      className: className,
      css: css`
              ${isHidden && styleStrings.hidden};
            `
    }, widget.globalStyles && ___EmotionJSX(Global, {
      styles: /*#__PURE__*/coreCss(widget.globalStyles, ";label:EditorControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
    }), errors && ___EmotionJSX(ControlErrorsList, null, errors.map(error => error.message && typeof error.message === 'string' && ___EmotionJSX("li", {
      key: error.message.trim().replace(/[^a-z0-9]+/gi, '-')
    }, error.message))), ___EmotionJSX(LabelComponent, {
      field: field,
      isActive: isSelected || this.state.styleActive,
      hasErrors: hasErrors,
      uniqueFieldId: this.uniqueFieldId,
      isFieldOptional: isFieldOptional,
      t: t
    }), ___EmotionJSX(Widget, {
      classNameWrapper: cx(css`
                  ${styleStrings.widget};
                `, {
        [css`
                    ${styleStrings.widgetActive};
                  `]: isSelected || this.state.styleActive
      }, {
        [css`
                    ${styleStrings.widgetError};
                  `]: hasErrors
      }, {
        [css`
                    ${styleStrings.disabled}
                  `]: isDisabled
      }),
      classNameWidget: css`
                ${styleStrings.widget};
              `,
      classNameWidgetActive: css`
                ${styleStrings.widgetActive};
              `,
      classNameLabel: css`
                ${styleStrings.label};
              `,
      classNameLabelActive: css`
                ${styleStrings.labelActive};
              `,
      controlComponent: widget.control,
      entry: entry,
      collection: collection,
      config: config,
      field: field,
      uniqueFieldId: this.uniqueFieldId,
      value: value,
      mediaPaths: mediaPaths,
      metadata: metadata,
      onChange: (newValue, newMetadata) => onChange(field, newValue, newMetadata),
      onValidate: onValidate && _partial(onValidate, this.uniqueFieldId),
      onOpenMediaLibrary: openMediaLibrary,
      onClearMediaControl: clearMediaControl,
      onRemoveMediaControl: removeMediaControl,
      onRemoveInsertedMedia: removeInsertedMedia,
      onPersistMedia: persistMedia,
      onAddAsset: addAsset,
      getAsset: boundGetAsset,
      hasActiveStyle: isSelected || this.state.styleActive,
      setActiveStyle: () => this.setState({
        styleActive: true
      }),
      setInactiveStyle: () => this.setState({
        styleActive: false
      }),
      resolveWidget: resolveWidget,
      widget: widget,
      getEditorComponents: getEditorComponents,
      ref: processControlRef && _partial(processControlRef, field),
      controlRef: controlRef,
      editorControl: ConnectedEditorControl,
      query: query,
      loadEntry: loadEntry,
      queryHits: queryHits[this.uniqueFieldId] || [],
      clearSearch: clearSearch,
      clearFieldErrors: clearFieldErrors,
      isFetching: isFetching,
      fieldsErrors: fieldsErrors,
      onValidateObject: onValidateObject,
      isEditorComponent: isEditorComponent,
      isNewEditorComponent: isNewEditorComponent,
      parentIds: parentIds,
      t: t,
      validateMetaField: validateMetaField,
      isDisabled: isDisabled,
      isFieldDuplicate: isFieldDuplicate,
      isFieldHidden: isFieldHidden
    }), fieldHint && ___EmotionJSX(ControlHint, {
      active: isSelected || this.state.styleActive,
      error: hasErrors
    }, fieldHint)));
  }

}

_defineProperty(EditorControl, "propTypes", {
  value: PropTypes.oneOfType([PropTypes.node, PropTypes.object, PropTypes.string, PropTypes.bool]),
  field: ImmutablePropTypes.map.isRequired,
  fieldsMetaData: ImmutablePropTypes.map,
  fieldsErrors: ImmutablePropTypes.map,
  mediaPaths: ImmutablePropTypes.map.isRequired,
  boundGetAsset: PropTypes.func.isRequired,
  onChange: PropTypes.func.isRequired,
  openMediaLibrary: PropTypes.func.isRequired,
  addAsset: PropTypes.func.isRequired,
  removeInsertedMedia: PropTypes.func.isRequired,
  persistMedia: PropTypes.func.isRequired,
  onValidate: PropTypes.func,
  processControlRef: PropTypes.func,
  controlRef: PropTypes.func,
  query: PropTypes.func.isRequired,
  queryHits: PropTypes.object,
  isFetching: PropTypes.bool,
  clearSearch: PropTypes.func.isRequired,
  clearFieldErrors: PropTypes.func.isRequired,
  loadEntry: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  isEditorComponent: PropTypes.bool,
  isNewEditorComponent: PropTypes.bool,
  parentIds: PropTypes.arrayOf(PropTypes.string),
  entry: ImmutablePropTypes.map.isRequired,
  collection: ImmutablePropTypes.map.isRequired,
  isDisabled: PropTypes.bool,
  isHidden: PropTypes.bool,
  isFieldDuplicate: PropTypes.func,
  isFieldHidden: PropTypes.func
});

_defineProperty(EditorControl, "defaultProps", {
  parentIds: []
});

function mapStateToProps(state) {
  const {
    collections,
    entryDraft
  } = state;
  const entry = entryDraft.get('entry');
  const collection = collections.get(entryDraft.getIn(['entry', 'collection']));
  const isLoadingAsset = selectIsLoadingAsset(state.medias);

  async function loadEntry(collectionName, slug) {
    const targetCollection = collections.get(collectionName);

    if (targetCollection) {
      const loadedEntry = await tryLoadEntry(state, targetCollection, slug);
      return loadedEntry;
    } else {
      throw new Error(`Can't find collection '${collectionName}'`);
    }
  }

  return {
    mediaPaths: state.mediaLibrary.get('controlMedia'),
    isFetching: state.search.isFetching,
    queryHits: state.search.queryHits,
    config: state.config,
    entry,
    collection,
    isLoadingAsset,
    loadEntry,
    validateMetaField: (field, value, t) => validateMetaField(state, collection, field, value, t)
  };
}

function mapDispatchToProps(dispatch) {
  const creators = bindActionCreators({
    openMediaLibrary,
    clearMediaControl,
    removeMediaControl,
    removeInsertedMedia,
    persistMedia,
    addAsset,
    query,
    clearSearch,
    clearFieldErrors
  }, dispatch);
  return _objectSpread(_objectSpread({}, creators), {}, {
    boundGetAsset: (collection, entry) => boundGetAsset(dispatch, collection, entry)
  });
}

function mergeProps(stateProps, dispatchProps, ownProps) {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, stateProps), dispatchProps), ownProps), {}, {
    boundGetAsset: dispatchProps.boundGetAsset(stateProps.collection, stateProps.entry)
  });
}

const ConnectedEditorControl = connect(mapStateToProps, mapDispatchToProps, mergeProps)(translate()(EditorControl));
export default ConnectedEditorControl;